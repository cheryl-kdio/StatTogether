{
  "hash": "557c2ea60ee6bfa8925226eb0b95ca05",
  "result": {
    "markdown": "---\ntitle: \"partition\"\noutput: pdf_document\ndate: \"2024-03-15\"\n---\n\n\n\n\n# Partition simple\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-1_6d62288c0004d0d624152c922ec6f4cc'}\n\n```{.r .cell-code}\n#setwd(\"~/Repositories/cherry-stats/projets/LAL\")\nload(\"qaly.RData\")\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(boot)\nlibrary(survRM2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLe chargement a nécessité le package : survival\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'survival'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:boot':\n\n    aml\n```\n:::\n:::\n\n::: {.cell hash='partition_cache/html/conversion_757762fae174d974dcaaa6741675e076'}\n\n```{.r .cell-code}\nqaly$finctdt   <- apply(qaly[,c(\"C1dt\",\"C2dt\" , \"C3dt\" , \"C4dt\", \"Inter1dt\" )],1,max,na.rm=T)\nqaly$finct.dt <- as.Date(as.character(qaly$finctdt),format=\"%Y-%m-%d\")\n```\n:::\n\n::: {.cell hash='partition_cache/html/calcul delais_343f986273579d084e0de925ac4559e5'}\n\n```{.r .cell-code}\nqaly$suivi  <- as.numeric(qaly$Datemax-qaly$randodt)/(365.25/12)\nqaly$survie <- as.numeric(qaly$deathdt-qaly$randodt)/(365.25/12)\nqaly$delfinct <- as.numeric(qaly$finct.dt-qaly$randodt)/(365.25/12)\nqaly$delarr <- as.numeric(qaly$arrpremadt-qaly$randodt)/(365.25/12)\nqaly$delfinct[which(qaly$delfinct==0)]<- qaly$delarr[which(qaly$delfinct==0)]\nqaly$finct<- rep(1,length(qaly$delfinct))\nqaly$delrec<- as.numeric(qaly$relapsdt-qaly$randodt)/(365.25/12)\nqaly$delpfs<- qaly$suivi\nqaly$delpfs[!is.na(qaly$delrec)]<-qaly$delrec[!is.na(qaly$delrec)]\nqaly$delbmt <- as.numeric(qaly$bmtdt-qaly$randodt)/(365.25/12)\nqaly$delbmt1 <- as.numeric(qaly$cgvhdt-qaly$randodt)/(365.25/12)\nqaly$delbmt2 <- as.numeric(qaly$agvhdt-qaly$randodt)/(365.25/12)\n\nqaly$delfinct2 <- qaly$delfinct\nqaly$delfinct2[!is.na(qaly$delbmt)]<-pmax(qaly$delfinct[!is.na(qaly$delbmt)],qaly$delbmt[!is.na(qaly$delbmt)]) #add ,qaly$delbmt1[!is.na(qaly$delbmt1)],qaly$delbmt2[!is.na(qaly$delbmt2)]\n#It takes in account the complication ecountered after the transplant\n#finct\nqaly$finct2 <- qaly$finct\nqaly$finct2[!is.na(qaly$delbmt)]<-1\n```\n:::\n\n\n### Compute the survival curves for each arm\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-2_9985880218093ae8dfbc7809c6f1de89'}\n\n```{.r .cell-code}\nlibrary(survival)\n\n# Arm A\nct_A  <- survfit(Surv(delfinct,finct)~1,data=qaly,subset = (R1 == \"Intensive arm (A)\")) # ct : Durée du traitement\nct2_A  <- survfit(Surv(delfinct2,finct2)~1,data=qaly,subset = (R1 == \"Intensive arm (A)\")) #Durée du traitement avec complications\nsv_A  <- survfit(Surv(suivi,as.numeric(as.character(dc)))~1,data=qaly,subset = (R1 == \"Intensive arm (A)\")) # Durée de survie : Temps avant décès\nefs_A <- survfit(Surv(delpfs,as.numeric(as.character(pfs)))~1, data=qaly,subset = (R1 == \"Intensive arm (A)\")) # Durée de survie sans progression : Temps avant rechute \n\n# Arm B\nct_B  <- survfit(Surv(delfinct,finct)~1,data=qaly,subset = (R1 == \"Light arm (B)\"))\nct2_B  <- survfit(Surv(delfinct2,finct2)~1,data=qaly,subset = (R1 == \"Light arm (B)\"))\nsv_B  <- survfit(Surv(suivi,as.numeric(as.character(dc)))~1,data=qaly,subset = (R1 == \"Light arm (B)\"))\nefs_B <- survfit(Surv(delpfs,as.numeric(as.character(pfs)))~1, data=qaly,subset = (R1 == \"Light arm (B)\"))\n```\n:::\n\n\n## Plot the survival curves for each arm\n\n### Bras A\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-3_09fc400a204e801ab6de12f8e8249409'}\n\n```{.r .cell-code}\n#fig.width=6, fig.height=5.5 => use later for website\n\nfit1<-list(CT = ct_A, CT2=ct2_A,SV=sv_A, EFS=efs_A)\nlibrary(survminer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLe chargement a nécessité le package : ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLe chargement a nécessité le package : ggpubr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'survminer'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:survival':\n\n    myeloma\n```\n:::\n\n```{.r .cell-code}\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'gridExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:dplyr':\n\n    combine\n```\n:::\n\n```{.r .cell-code}\ncolors <- c(\"#A31621\", \"#053C5E\", \"#F3A712\", \"#1F7A8C\", \"#AFB3F7\")\n\nt<-ggsurvplot_combine(fit1,\n          risk.table = TRUE,                  # Add risk table\n   xlab = \"Time in days\",   # customize X axis label.\n   ggtheme = theme_light(), # customize plot and risk table with a therme.\n risk.table.y.text.col = T, # colour risk table text annotations.\n  risk.table.y.text = FALSE,\n  legend.labs = c(\"CT\",\"CT2\",\"SV\",\"EFS\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `survtable = purrr::map2(...)`.\nCaused by warning:\n! `select_()` was deprecated in dplyr 0.7.0.\nℹ Please use `select()` instead.\nℹ The deprecated feature was likely used in the survminer package.\n  Please report the issue at <https://github.com/kassambara/survminer/issues>.\n```\n:::\n\n```{.r .cell-code}\nsv_plot_A <- ggsurvplot(sv_A, risk.table = TRUE,\n                      ggtheme = theme_light(),\n                      # tables.theme = theme(\n                      #   axis.text.x = element_blank(),  # Hide x-axis text\n                      #   axis.ticks.x = element_blank(), # Hide x-axis ticks\n                      #   axis.title.x = element_blank()  # Optionally, hide the x-axis title as well\n                      # ),\n                      risk.table.y.text.col = TRUE,\n                      risk.table.y.text = FALSE,\n                      palette = colors[2])  \n\nlibrary(dplyr)\nlibrary(gt)\nlibrary(gtsummary)\nlibrary(ks)\nlibrary(tidyr)\nlibrary(survival)\nlibrary(ggplot2)\nlibrary(ggsurvfit)\n\n\ndf<-t$plot$data\nsurv_A<-df %>% mutate(strata = sub(\"x=\", \"\", strata)) %>%\n  group_by(strata) %>%\n  summarise(time = c(time - 0.001, time),\n            surv = c(1, head(surv, -1), surv),\n            .groups = \"drop\") %>%\n  arrange(time) %>%\n  pivot_wider(names_from = \"strata\", values_from = \"surv\") %>%\n  fill(1:5, .direction = \"downup\") %>%\n  ggplot(aes(time, CT)) +\n  geom_step(aes(linetype = \"CT\")) +\n  geom_ribbon(aes(ymin = 0, ymax = CT, fill = \"TOX1\"),alpha=0.5)+\n  geom_step(aes(y = CT2, linetype = \"CT2\"),linewidth=0.9, colour=\"#0077b6\") +\n  geom_ribbon(aes(ymin = CT, ymax = CT2, fill = \"TOX2\"),alpha=0.5) +\n  geom_step(aes(y = EFS,linetype = \"EFS\"),linewidth=0.9, colour=\"#48cae4\") +\n  geom_ribbon(aes(ymin = CT2, ymax = EFS, fill = \"TWiST\"),alpha=0.5)+\n  geom_step(aes(y = SV,linetype = \"SV\"),linewidth=0.9, colour=\"#caf0f8\")+\n  geom_ribbon(aes(ymin = EFS, ymax = SV, fill = \"REL\"),alpha=0.5)+\n  scale_fill_manual(values = c(\"TOX1\" = \"#03045e\", \"TOX2\" = \"#0077b6\", \"TWiST\" = \"#48cae4\", \"REL\" = \"#caf0f8\")) +\n  labs(x = \"Time\", y = \"Survival Probability\", linetype = \"Duration\", fill = \"Events\") +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n:::\n\n```{.r .cell-code}\ncombined_plot <- grid.arrange(surv_A, sv_plot_A$table, ncol = 1,heights = c(6, 2))\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n#### Partition 1\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-4_31e369a48c3038c599a386570422ae02'}\n\n```{.r .cell-code}\nlibrary(survminer)\nlibrary(survival)\nlibrary(gridExtra) # or library(patchwork)\n\n# Assuming ct, sv, and efs are survival objects\nfit1 <- list(CT = ct_A, SV = sv_A, EFS = efs_A)\n\n# custom color palette for CT, SV, EFS\ncolors <- c(\"#A31621\", \"#053C5E\", \"#F3A712\", \"#1F7A8C\", \"#AFB3F7\")\n\n# Step 1: Generate the Combined Survival Plot without a risk table\nsurv1_A <- ggsurvplot_combine(fit1,\n                        risk.table = FALSE,  # Disable risk table here\n                        xlab = \"Time in days\",\n                        ggtheme = theme_light(),\n                        legend.labs = c(\"CT\",\"SV\",\"EFS\"),\n                        palette=colors,\n                        title=\"Bras A\")\n\n# Step 2: Generate a Separate Risk Table for \"SV\"\n# Note: This assumes 'sv' is a fit object from survival analysis.\n# If 'sv' is not directly usable, you might need to recreate the survival analysis for SV.\nsv_plot_A <- ggsurvplot(sv_A, risk.table = TRUE,\n                      ggtheme = theme_light(),\n                      # tables.theme = theme(\n                      #   axis.text.x = element_blank(),  # Hide x-axis text\n                      #   axis.ticks.x = element_blank(), # Hide x-axis ticks\n                      #   axis.title.x = element_blank()  # Optionally, hide the x-axis title as well\n                      # ),\n                      risk.table.y.text.col = TRUE,\n                      risk.table.y.text = FALSE,\n                      palette = colors[2])  # Adjust 'colors[2]' as per your color setup\n\n\n# Step 3: Combine the Plot and the Risk Table Manually\n# Option 1: Using gridExtra\ncombined_plot <- grid.arrange(surv1_A$plot, sv_plot_A$table, ncol = 1,heights = c(6, 2))\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Or Option 2: Using patchwork (Uncomment to use)\n# combined_plot <- g$plot / sv_plot$table\n\n# Print or save the combined plot\nprint(combined_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (2 x 1) \"arrange\": 2 grobs\n  z     cells    name           grob\n1 1 (1-1,1-1) arrange gtable[layout]\n2 2 (2-2,1-1) arrange gtable[layout]\n```\n:::\n:::\n\n\n#### Partition 2\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-5_1d9ddef08526e38e5bf644ada041165c'}\n\n```{.r .cell-code}\nlibrary(survminer)\nlibrary(survival)\nlibrary(gridExtra) # or library(patchwork)\n\n# Assuming ct, sv, and efs are survival objects\nfit2 <- list(CT = ct_A, SV = sv_A, EFS = efs_A, CT2 = ct2_A)\n\n# custom color palette for CT, SV, EFS\ncolors <- c(\"#A31621\", \"#053C5E\", \"#F3A712\", \"#1F7A8C\", \"#AFB3F7\")\n\n# Step 1: Generate the Combined Survival Plot without a risk table\nsurv2_A <- ggsurvplot_combine(fit2,\n                        risk.table = FALSE,  # Disable risk table here\n                        xlab = \"Time in days\",\n                        ggtheme = theme_light(),\n                        legend.labs = c(\"CT\",\"SV\",\"EFS\",\"CT2\"),\n                        palette=colors,\n                        title=\"Bras A\")\n\n\n\n# Step 3: Combine the Plot and the Risk Table Manually\n# Option 1: Using gridExtra\ncombined_plot <- grid.arrange(surv2_A$plot, sv_plot_A$table, ncol = 1,heights = c(6, 2))\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Print or save the combined plot\nprint(combined_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (2 x 1) \"arrange\": 2 grobs\n  z     cells    name           grob\n1 1 (1-1,1-1) arrange gtable[layout]\n2 2 (2-2,1-1) arrange gtable[layout]\n```\n:::\n:::\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-6_87c8cd36c8a1e230f523b661ac4a8344'}\n\n```{.r .cell-code}\n# fit2<-list(CT = ct, CT2 = ct2, SV=sv, EFS=efs)\n# library(survminer)\n# t<-ggsurvplot_combine(fit,\n#           risk.table = TRUE,                  # Add risk table\n#    xlab = \"Time in days\",   # customize X axis label.\n#    ggtheme = theme_light(), # customize plot and risk table with a therme.\n#  risk.table.y.text.col = T, # colour risk table text annotations.\n#   risk.table.y.text = FALSE,\n#   legend.labs = c(\"CT\", \"CT2\",\"SV\",\"EFS\"))\n# t\n```\n:::\n\n\n### Bras B\n\n#### Partition 1\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-7_677d608e48f62f789cd1b1b0df9d7bf0'}\n\n```{.r .cell-code}\nlibrary(survminer)\nlibrary(survival)\nlibrary(gridExtra) # or library(patchwork)\n\n# Assuming ct, sv, and efs are survival objects\nfit1 <- list(CT = ct_B, SV = sv_B, EFS = efs_B)\n\n# custom color palette for CT, SV, EFS\ncolors <- c(\"#A31621\", \"#053C5E\", \"#F3A712\", \"#1F7A8C\", \"#AFB3F7\")\n\n# Step 1: Generate the Combined Survival Plot without a risk table\nsurv1_B <- ggsurvplot_combine(fit1,\n                        risk.table = FALSE,  # Disable risk table here\n                        xlab = \"Time in days\",\n                        ggtheme = theme_light(),\n                        legend.labs = c(\"CT\",\"SV\",\"EFS\"),\n                        palette=colors,\n                        title=\"Bras B\")\n\n# Step 2: Generate a Separate Risk Table for \"SV\"\n# Note: This assumes 'sv' is a fit object from survival analysis.\n# If 'sv' is not directly usable, you might need to recreate the survival analysis for SV.\nsv_plot_B <- ggsurvplot(sv_B, risk.table = TRUE,\n                      ggtheme = theme_light(),\n                      # tables.theme = theme(\n                      #   axis.text.x = element_blank(),  # Hide x-axis text\n                      #   axis.ticks.x = element_blank(), # Hide x-axis ticks\n                      #   axis.title.x = element_blank()  # Optionally, hide the x-axis title as well\n                      # ),\n                      risk.table.y.text.col = TRUE,\n                      risk.table.y.text = FALSE,\n                      palette = colors[2])  # Adjust 'colors[2]' as per your color setup\n\n\n# Step 3: Combine the Plot and the Risk Table Manually\n# Option 1: Using gridExtra\ncombined_plot <- grid.arrange(surv1_B$plot, sv_plot_B$table, ncol = 1,heights = c(6, 2))\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Or Option 2: Using patchwork (Uncomment to use)\n# combined_plot <- g$plot / sv_plot$table\n\n# Print or save the combined plot\nprint(combined_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (2 x 1) \"arrange\": 2 grobs\n  z     cells    name           grob\n1 1 (1-1,1-1) arrange gtable[layout]\n2 2 (2-2,1-1) arrange gtable[layout]\n```\n:::\n:::\n\n\n#### Partition 2\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-8_a0a746799bbbeb61ec35607445489d89'}\n\n```{.r .cell-code}\nlibrary(survminer)\nlibrary(survival)\nlibrary(gridExtra) # or library(patchwork)\n\n# Assuming ct, sv, and efs are survival objects\nfit2 <- list(CT = ct_B, SV = sv_B, EFS = efs_B, CT2 = ct2_B)\n\n# custom color palette for CT, SV, EFS\ncolors <- c(\"#A31621\", \"#053C5E\", \"#F3A712\", \"#1F7A8C\", \"#AFB3F7\")\n\n# Step 1: Generate the Combined Survival Plot without a risk table\nsurv2_B <- ggsurvplot_combine(fit2,\n                        risk.table = FALSE,  # Disable risk table here\n                        xlab = \"Time in days\",\n                        ggtheme = theme_light(),\n                        legend.labs = c(\"CT\",\"SV\",\"EFS\",\"CT2\"),\n                        palette=colors,\n                        title=\"Bras B\")\n\n\n\n# Step 3: Combine the Plot and the Risk Table Manually\n# Option 1: Using gridExtra\ncombined_plot <- grid.arrange(surv2_B$plot, sv_plot_B$table, ncol = 1,heights = c(6, 2))\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Print or save the combined plot\nprint(combined_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (2 x 1) \"arrange\": 2 grobs\n  z     cells    name           grob\n1 1 (1-1,1-1) arrange gtable[layout]\n2 2 (2-2,1-1) arrange gtable[layout]\n```\n:::\n:::\n\n\n# RMST\n\n## Computing rmst for each arm\n\n\n::: {.cell hash='partition_cache/html/rmst_computing_3bc7401dbd2f8a34598d5e159de4f717'}\n\n```{.r .cell-code}\n# Charger les packages nécessaires\nlibrary(survival)\nlibrary(survRM2) # Assurez-vous que le package rmst2 est installé pour accéder à cette fonction\nlibrary(boot)\n\n### 0 = Int arm A, 1 = Light arm B\nt_censure <- 60#min(64.3285421,60.9774127) # 20% de censure\n\n# For ct_rmst\nct_rmst<-rmst2(qaly$delfinct, qaly$finct, as.factor(as.numeric(qaly$R1)-1), covariates = NULL, alpha = 0.05)\n\nct_rmstB<-ct_rmst$RMST.arm1$rmst[1]\nct_rmstA<-ct_rmst$RMST.arm0$rmst[1]\n\n# For ct2_rmst\nct2_rmst<-rmst2(qaly$delfinct2, qaly$finct2, as.factor(as.numeric(qaly$R1)-1), covariates = NULL, alpha = 0.05)\nct2_rmstB <- ct2_rmst$RMST.arm1$rmst[1]  # Assuming arm1 corresponds to arm B\nct2_rmstA <- ct2_rmst$RMST.arm0$rmst[1]  # Assuming arm0 corresponds to arm A\n\n# For sv_rmst\nsv_rmst<-rmst2(qaly$suivi, as.numeric(as.character(qaly$dc)), as.factor(as.numeric(qaly$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\nsv_rmstB <- sv_rmst$RMST.arm1$rmst[1]\nsv_rmstA <- sv_rmst$RMST.arm0$rmst[1]\n\n# For efs_rmst\nefs_rmst<-rmst2(qaly$delpfs, as.numeric(as.character(qaly$pfs)), as.factor(as.numeric(qaly$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\nefs_rmstB <- efs_rmst$RMST.arm1$rmst[1]\nefs_rmstA <- efs_rmst$RMST.arm0$rmst[1]\n\n# Calculer TOX, TWiST, et REL en utilisant les RMST calculés\ntox1_A = ct_rmstA\ntox2_A = ct2_rmstA\ntwist1_A = efs_rmstA - ct_rmstA\ntwist2_A= efs_rmstA - ct2_rmstA\nrel_A = sv_rmstA - efs_rmstA\n\n\n# Calculer TOX, TWiST, et REL en utilisant les RMST calculés\ntox1_B = ct_rmstB\ntox2_B = ct2_rmstB\ntwist1_B = efs_rmstB - ct_rmstB\ntwist2_B= efs_rmstB - ct2_rmstB\nrel_B = sv_rmstB - efs_rmstB\n```\n:::\n\n\n#### Boostrapping\n\n##### TOX/TWISt/REL & their differences between group\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-9_3d0c3d214875738b000019e6b608f430'}\n\n```{.r .cell-code}\n# Fonction pour calculer les RMST sur un échantillon bootstrapé\n\ncalculate_rmst <- function(data, indices, uTWiST, uTOX, uREL, t_censure) {\n  sampled_data <- data[indices, ]\n  \n  # Calculer les RMST pour chaque bras et chaque étape\n  ct_rmst <- rmst2(sampled_data$delfinct, sampled_data$finct, as.factor(as.numeric(sampled_data$R1)-1), covariates = NULL, alpha = 0.05)\n  ct_rmstB <- ct_rmst$RMST.arm1$rmst[1]\n  ct_rmstA <- ct_rmst$RMST.arm0$rmst[1]\n  \n  ct2_rmst <- rmst2(sampled_data$delfinct2, sampled_data$finct2, as.factor(as.numeric(sampled_data$R1)-1), covariates = NULL, alpha = 0.05)\n  ct2_rmstB <- ct2_rmst$RMST.arm1$rmst[1]\n  ct2_rmstA <- ct2_rmst$RMST.arm0$rmst[1]\n  \n  sv_rmst <- rmst2(sampled_data$suivi, as.numeric(as.character(sampled_data$dc)), as.factor(as.numeric(sampled_data$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  sv_rmstB <- sv_rmst$RMST.arm1$rmst[1]\n  sv_rmstA <- sv_rmst$RMST.arm0$rmst[1]\n  \n  efs_rmst <- rmst2(sampled_data$delpfs, as.numeric(as.character(sampled_data$pfs)), as.factor(as.numeric(sampled_data$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  efs_rmstB <- efs_rmst$RMST.arm1$rmst[1]\n  efs_rmstA <- efs_rmst$RMST.arm0$rmst[1]\n  \n  # Calculer les tox, twists et rels pour chaque bras et chaque étape\n  tox1_A <- ct_rmstA\n  tox2_A <- ct2_rmstA\n  twist1_A <- efs_rmstA - ct_rmstA\n  twist2_A <- efs_rmstA - ct2_rmstA\n  rel_A <- sv_rmstA - efs_rmstA\n  \n  tox1_B <- ct_rmstB\n  tox2_B <- ct2_rmstB\n  twist1_B <- efs_rmstB - ct_rmstB\n  twist2_B <- efs_rmstB - ct2_rmstB\n  rel_B <- sv_rmstB - efs_rmstB\n  \n  # Calculer les différences entre les bras\n  tox1_diff <- tox1_A - tox1_B\n  tox2_diff <- tox2_A - tox2_B\n  twist1_diff <- twist1_A - twist1_B\n  twist2_diff <- twist2_A - twist2_B\n  rel_diff <- rel_A - rel_B\n  \n  # Calculer QTWiST pour chaque partition\n  q_twist1_A <- (uTOX * tox1_A) + (uTWiST * twist1_A) + (uREL * rel_A)\n  q_twist1_B <- (uTOX * tox1_B) + (uTWiST * twist1_B) + (uREL * rel_B)\n  q_twist1_diff <- q_twist1_A - q_twist1_B\n  \n  q_twist2_A <- (uTOX * (tox1_A + tox2_A)) + (uTWiST * (twist1_A + twist2_A)) + (uREL * rel_A)\n  q_twist2_B <- (uTOX * (tox1_B + tox2_B)) + (uTWiST * (twist1_B + twist2_B)) + (uREL * rel_A)\n  q_twist2_diff <- q_twist2_A - q_twist2_B\n  \n  # Retourner les résultats\n  return(c(\"TOX1 A\" = tox1_A, \"TOX2 A\" = tox2_A, \"TWiST1 A\" = twist1_A, \"TWiST2 A\" = twist2_A, \"REL A\" = rel_A, \n            \"TOX1 B\" = tox1_B, \"TOX2 B\" = tox2_B, \"TWiST1 B\" = twist1_B, \"TWiST2 B\" = twist2_B, \"REL B\" = rel_B, \n            \"TOX1diff\" = tox1_diff, \"TOX2 diff\" = tox2_diff, \"TWiST1 diff\" = twist1_diff, \"twist2_diff\" = twist2_diff, \n            \"REL diff\" = rel_diff,\"q_TWiST1 A\" = q_twist1_A, \"q_TWiST1 B\" = q_twist1_B, \"q_TWiST1 diff\" = q_twist1_diff, \n            \"q_TWiST2 A\" = q_twist2_A, \"q_TWiST2 B\" = q_twist2_B, \"q_TWiST2 diff\" = q_twist2_diff))}\n\n# Appliquer le bootstrap sur le dataset 'qaly'\nt_censure <- min(64.3285421, 60.9774127) # 20% de censure\nqaly_cens<-qaly %>% select(delfinct, finct, delfinct2, finct2, suivi, dc, delpfs, pfs, R1)\nbootstrap_results1 <- censboot(qaly_cens, calculate_rmst, R = 1000, uTWiST = 1, uTOX = 0.5, uREL = 0.5, t_censure = t_censure)\n\nboot_summary<-summary(bootstrap_results1) %>% as.data.frame() \nrownames(boot_summary) <- names(bootstrap_results1$t0)\n```\n:::\n\n\n### Threshold analysis for Q-TWIST diff with computed var-cov\n\n\n::: {.cell hash='partition_cache/html/boot1_650f49fcf228d5f6467c761ef4918eba'}\n\n```{.r .cell-code}\nresultsboot<-as.data.frame(bootstrap_results1$t) %>%\n  select(\"V1\", \"V3\", \"V5\", \"V6\", \"V8\", \"V10\",\"V11\",\"V13\",\"V15\") %>%\n  rename(toxA = \"V1\", twistA = \"V3\", relA = \"V5\", toxB = \"V6\", twistB = \"V8\", relB = \"V10\",toxDiff=\"V11\", twistDiff=\"V13\", relDiff=\"V15\")\n\n# Attention, nous ne trouvons pas les mêmes var covariances pour les différences de qtwist\nvar(resultsboot$toxDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03132193\n```\n:::\n\n```{.r .cell-code}\nvar(resultsboot$twistDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13.78092\n```\n:::\n\n```{.r .cell-code}\nvar(resultsboot$relDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.682029\n```\n:::\n\n```{.r .cell-code}\ncov(resultsboot$toxDiff, resultsboot$twistDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1347315\n```\n:::\n\n```{.r .cell-code}\ncov(resultsboot$toxDiff, resultsboot$relDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03890453\n```\n:::\n\n```{.r .cell-code}\ncov(resultsboot$twistDiff, resultsboot$relDiff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4.404759\n```\n:::\n:::\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-10_58fef443df477686a8f8bddaf4804621'}\n\n```{.r .cell-code}\nvariance_QTwist <- function(U_TOX, U_REL, Var_TOX, Var_TWIST, Var_REL, Cov_TOX_TWIST, Cov_TOX_REL, Cov_TWIST_REL) {\n  variance <- (U_TOX^2) * Var_TOX + Var_TWIST + (U_REL^2) * Var_REL\n  variance <- variance + U_TOX * Cov_TOX_TWIST + U_TOX * U_REL * Cov_TOX_REL + U_REL * Cov_TWIST_REL\n  return(variance)\n}\n\n# Matrice de variance-covariance des estimateurs bootstrappés\n\n# Var_TOX <- var(resultsdiff$toxDiff)\n# Var_TWIST <- var(resultsdiff$twistDiff)\n# Var_REL <- var(resultsdiff$relDiff)\n# Cov_TOX_TWIST <- cov(resultsdiff$toxDiff, resultsdiff$twistDiff)\n# Cov_TOX_REL <- cov(resultsdiff$toxDiff, resultsdiff$relDiff)\n# Cov_TWIST_REL <- cov(resultsdiff$twistDiff, resultsdiff$relDiff)\n\nVar_TOX <- 0.175**2\nVar_TWIST <- 3.73**2\nVar_REL <- 2.06**2\nCov_TOX_TWIST <- 3.85e-3\nCov_TOX_REL <- 2.12e-3\nCov_TWIST_REL <- -0.48\n\n\n# QTWiST\n\nresults <- data.frame(uTOX=numeric(), uREL=numeric(), QTWiST1_Diff=numeric(), Lower=numeric(), Upper=numeric())\nuTWiST=1\nfor (uTOX in seq(0, 1, by=0.25)) {\n  for (uREL in seq(0, 1, by=0.25)) {\n    \n  # Calculer les RMST pour chaque bras et chaque étape\n  ct_rmst <- rmst2(qaly$delfinct, qaly$finct, as.factor(as.numeric(qaly$R1)-1), covariates = NULL, alpha = 0.05)\n  ct_rmstB <- ct_rmst$RMST.arm1$rmst[1]\n  ct_rmstA <- ct_rmst$RMST.arm0$rmst[1]\n  \n  # ct2_rmst <- rmst2(qaly$delfinct2, qaly$finct2, as.factor(as.numeric(qaly$R1)-1), covariates = NULL, alpha = 0.05)\n  # ct2_rmstB <- ct2_rmst$RMST.arm1$rmst[1]\n  # ct2_rmstA <- ct2_rmst$RMST.arm0$rmst[1]\n  \n  sv_rmst <- rmst2(qaly$suivi, as.numeric(as.character(qaly$dc)), as.factor(as.numeric(qaly$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  sv_rmstB <- sv_rmst$RMST.arm1$rmst[1]\n  sv_rmstA <- sv_rmst$RMST.arm0$rmst[1]\n  \n  efs_rmst <- rmst2(qaly$delpfs, as.numeric(as.character(qaly$pfs)), as.factor(as.numeric(qaly$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  efs_rmstB <- efs_rmst$RMST.arm1$rmst[1]\n  efs_rmstA <- efs_rmst$RMST.arm0$rmst[1]\n  \n  # Calculer les tox, twists et rels pour chaque bras et chaque étape\n  tox1_A <- ct_rmstA\n  twist1_A <- efs_rmstA - ct_rmstA\n  rel_A <- sv_rmstA - efs_rmstA\n  \n  tox1_B <- ct_rmstB\n  twist1_B <- efs_rmstB - ct_rmstB\n  rel_B <- sv_rmstB - efs_rmstB\n  \n  # Calculer les différences entre les bras\n  tox1_diff <- tox1_A - tox1_B\n  twist1_diff <- twist1_A - twist1_B\n  rel_diff <- rel_A - rel_B\n  \n  # Calculer QTWiST pour chaque partition\n  q_twist1_A <- (uTOX * tox1_A) + (uTWiST * twist1_A) + (uREL * rel_A)\n  q_twist1_B <- (uTOX * tox1_B) + (uTWiST * twist1_B) + (uREL * rel_B)\n  q_twist1_diff <- q_twist1_A - q_twist1_B\n  \n  variance_qTwist <- variance_QTwist(uTOX, uREL, Var_TOX, Var_TWIST, Var_REL, Cov_TOX_TWIST, Cov_TOX_REL, Cov_TWIST_REL)\n  ic_qTwist_inf <- q_twist1_diff - 1.96*sqrt(variance_qTwist)\n  ic_qTwist_sup<-q_twist1_diff + 1.96*sqrt(variance_qTwist)\n  \n      # Ajouter les résultats dans le dataframe\n  results <- rbind(results, data.frame(\n      uTOX=uTOX, \n      uREL=uREL, \n      QTWiST1_Diff=q_twist1_diff, \n      Lower=ic_qTwist_inf, # Lower CI\n      Upper=ic_qTwist_sup  # Upper CI\n    ))\n  }\n}\n```\n:::\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-11_b8db5187d0c2f91037aac05041a306f3'}\n\n```{.r .cell-code}\n# Filtrer les résultats où l'intervalle de confiance contient 0\ndiff_null <- results %>% filter(Lower <= 0, Upper >= 0) \n\n# Tracer le graphique en utilisant uTOX sur l'axe x et QTWiST1_Diff sur l'axe y, et uREL en tant que couleur\nplot(diff_null$uTOX, diff_null$QTWiST1_Diff, pch = 19, col = \"red\", xlab = \"uTOX\", ylab = \"QTWiST1_Diff\", main = \"Confidence interval contains 0\")\n# Ajouter uREL comme troisième axe\npoints(diff_null$QTWiST1_Diff, diff_null$uTOX, pch = 19, col = \"blue\")\n# Légende\nlegend(\"bottomright\", legend = c(\"QTWiST1_Diff\", \"uREL\"), col = c(\"red\", \"blue\"), pch = 19)\n```\n\n::: {.cell-output-display}\n![](partition_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# library(ggplot2)\n# # Créer le graphique\n# ggplot(diff_null, aes(x = uTOX, y = uREL)) +\n#   geom_point() + \n#   scale_x_continuous(name = \"Utility coefficient after relapse (μ_REL)\", limits = c(0, 1)) +\n#   scale_y_continuous(name = \"Utility coefficient for toxicity (μ_TOX)\", limits = c(0, 1)) +\n#   geom_abline(diffQTWiST1_Diff, linetype = \"dashed\")\n```\n:::\n\n\n### Threshold analysis for Q-TWIST diff with bootstrapp var-cov\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-12_79f8a0adb295eab48d9ea2e455c24ace'}\n\n```{.r .cell-code}\ndelta_qtwist <- function(data, indices, uTWiST, uTOX, uREL, t_censure) {\n  sampled_data <- data[indices, ]\n  \n  # Calculer les RMST pour chaque bras et chaque étape\n  ct_rmst <- rmst2(sampled_data$delfinct, sampled_data$finct, as.factor(as.numeric(sampled_data$R1)-1), covariates = NULL, alpha = 0.05)\n  ct_rmstB <- ct_rmst$RMST.arm1$rmst[1]\n  ct_rmstA <- ct_rmst$RMST.arm0$rmst[1]\n  \n  # ct2_rmst <- rmst2(sampled_data$delfinct2, sampled_data$finct2, as.factor(as.numeric(sampled_data$R1)-1), covariates = NULL, alpha = 0.05)\n  # ct2_rmstB <- ct2_rmst$RMST.arm1$rmst[1]\n  # ct2_rmstA <- ct2_rmst$RMST.arm0$rmst[1]\n  \n  sv_rmst <- rmst2(sampled_data$suivi, as.numeric(as.character(sampled_data$dc)), as.factor(as.numeric(sampled_data$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  sv_rmstB <- sv_rmst$RMST.arm1$rmst[1]\n  sv_rmstA <- sv_rmst$RMST.arm0$rmst[1]\n  \n  efs_rmst <- rmst2(sampled_data$delpfs, as.numeric(as.character(sampled_data$pfs)), as.factor(as.numeric(sampled_data$R1)-1), tau = t_censure, covariates = NULL, alpha = 0.05)\n  efs_rmstB <- efs_rmst$RMST.arm1$rmst[1]\n  efs_rmstA <- efs_rmst$RMST.arm0$rmst[1]\n  \n  # Calculer les tox, twists et rels pour chaque bras et chaque étape\n  tox1_A <- ct_rmstA\n  twist1_A <- efs_rmstA - ct_rmstA\n  rel_A <- sv_rmstA - efs_rmstA\n  \n  tox1_B <- ct_rmstB\n  twist1_B <- efs_rmstB - ct_rmstB\n  rel_B <- sv_rmstB - efs_rmstB\n  \n  # Calculer les différences entre les bras\n  tox1_diff <- tox1_A - tox1_B\n  twist1_diff <- twist1_A - twist1_B\n  rel_diff <- rel_A - rel_B\n  \n  # Calculer QTWiST pour chaque partition\n  q_twist1_A <- (uTOX * tox1_A) + (uTWiST * twist1_A) + (uREL * rel_A)\n  q_twist1_B <- (uTOX * tox1_B) + (uTWiST * twist1_B) + (uREL * rel_B)\n  q_twist1_diff <- q_twist1_A - q_twist1_B\n  \n  \n  # Retourner les résultats\n  return(\"q_TWiST1 diff\" = q_twist1_diff)}\n\n\n# delta_qtwist_boot <- censboot(qaly_cens, delta_qtwist, R = 1000, uTWiST = 1, uTOX = 0.5, uREL = 0.5, t_censure = t_censure)\n# boot.ci(delta_qtwist_boot,type=\"norm\")$normal\nlibrary(boot)\n# QTWiST\nresults1 <- data.frame(uTOX=numeric(), uREL=numeric(), QTWiST1_Diff=numeric(), Lower=numeric(), Upper=numeric())\n\nfor (uTOX in seq(0, 1, by=0.25)) {\n  for (uREL in seq(0, 1, by=0.25)) {\n    # Bootstrap analysis\n    delta_qtwist_boot <- censboot(qaly_cens, delta_qtwist, R = 1000, uTWiST = uTWiST, uTOX = uTOX, uREL = uREL, t_censure = t_censure)\n    boot_results <- boot.ci(delta_qtwist_boot, type=\"norm\")\n    boot_results$normal[2]\n    # Ajouter les résultats dans le dataframe\nresults1 <- rbind(results1, data.frame(\n      uTOX=uTOX, \n      uREL=uREL, \n      QTWiST1_Diff=q_twist1_diff, \n      Lower=boot_results$normal[2], # Lower CI\n      Upper=boot_results$normal[3]  # Upper CI\n))\n    }\n}\n```\n:::\n\n\n## Export results in latex\n\n\n::: {.cell hash='partition_cache/html/unnamed-chunk-13_5911e94398a936662e3bd8c1cd194489'}\n\n```{.r .cell-code}\n# if (!require(\"xtable\")) install.packages(\"xtable\")\n# library(xtable)\n# \n# rownames(results)\n# print(xtable(results), type = \"latex\", include.rownames = FALSE)\n# # %>% \n#   as_gt()%>% \n#   gtsave(\"name.text\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}