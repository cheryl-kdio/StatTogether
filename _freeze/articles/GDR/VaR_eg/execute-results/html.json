{
  "hash": "ade1fd96fff6778625b753392c45b5a5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Application de la VaR\nsidebar: auto\ndate : today\nauthor:\n  - Cheryl Kouadio\ncategories:\n  - risque\n  - finance\n  - gdr\nbibliography: ../../references.bib\n---\n\n# Introduction\n\nNous allons ici nous intéresser aux applications de la Value at Risk (VaR) en finance. La VaR est une mesure de risque qui permet d'estimer les pertes maximales potentielles d'un portefeuille  d'actifs financiers sur un horizon de temps donné, à un certain niveau de confiance. Elle est largement utilisée par les institutions financières pour évaluer et gérer les risques de marché, de crédit et de liquidité (cf. [Value at-Risk](var.qmd#sec-var-def))\n\n# Import des données\n\nNous utilisons les données du CAC 40 du 01/03/1990 au 10/05/2024. Le CAC 40 (Cotation Assistée en Continu) est l'indice boursier le plus important de la Bourse de Paris. Son nom signifie que c'est un indice composé des 40 sociétés françaises les plus significatives et les plus liquides cotées sur Euronext Paris, qui est l'une des principales places boursières en Europe.\n\n::: {#d37a46bb .cell execution_count=1}\n``` {.python .cell-code}\n# Librairie où importer les données\nimport yfinance as yf\n_ = yf.Ticker(\"^FCHI\")\nts_data = _.history(\"max\")\nts_data.index = ts_data.index.strftime('%Y-%m-%d')\nts_data.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nIndex(['Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits'], dtype='object')\n```\n:::\n:::\n\n\nNous  nous interesserons plus particulièrement au prix de la clôture, c'est à dire, le prix final de l'indice à la fin de la session de trading sur Euronext Paris, qui est la bourse où l'indice est coté. Celà reflète l'impact des nouvelles économiques, des performances des entreprises comprises dans l'indice, et des mouvements généraux du marché.\n\nPour implémenter la VaR, nous avons besoin des rendements.Nous utiliserons les rendements arithmétiques définis comme suit entre le temps $t$ et $t-1$ :\n\n$$\nR_{t} = \\frac{P_{t}-P_{t-1}}{P_{t-1}}\n$$\n\noù $P_{t}$ est le prix de clôture à la date $t$.\n\n::: {#c822823d .cell execution_count=2}\n``` {.python .cell-code}\nimport warnings\nwarnings.filterwarnings('ignore')\nts_data = ts_data[[ 'Close']]\nimport pandas as pd\nimport numpy as np\n\n\nts_data['Return'] = ts_data[\"Close\"].pct_change()\nts_data = ts_data.dropna(subset=['Return'])\nprint(ts_data.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Close    Return\nDate                        \n1990-03-02  1860.0  0.015284\n1990-03-05  1874.0  0.007527\n1990-03-06  1872.0 -0.001067\n1990-03-07  1880.0  0.004274\n1990-03-08  1917.0  0.019681\n```\n:::\n:::\n\n\n# Test de stationarité du log-rendement\n\nPour utiliser le log rendement comme variable profit et perte (PnL : Profit and Loss) pour impléter la VaR, nous devons tester sa stationarité. En effet, la stationarité est une propriété importante des séries temporelles financières. Une série temporelle est dite stationnaire si ses propriétés statistiques telles que la moyenne, la variance et la covariance restent constantes au fil du temps.\n\n::: {#d37ba6b9 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(6, 4))\n\nfig, ax = plt.subplots(1)\n\nax.set_xlabel('Date')\nax.set_ylabel('Historical Returns')\nax.plot(ts_data.index, ts_data['Return'], color='grey')\nax.tick_params(axis='y')\n\nplt.title('Historical Returns of CAC40')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 576x384 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-4-output-2.png){width=623 height=449}\n:::\n:::\n\n\nIl semblerait que la série des rendements est stationnaire. Nous allons tout de même en observant l'ACF et le PACF mais aussi effectuer un test de stationarité pour confirmer cette hypothèse.\n\n::: {#3d63a72b .cell execution_count=4}\n``` {.python .cell-code}\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig, ax = plt.subplots(1,2, figsize=(8, 4))\nplot_acf(ts_data['Return'].dropna(), ax=ax[0],title='ACF')\nplot_pacf(ts_data['Return'].dropna(), ax=ax[1],title='PACF')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-5-output-1.png){width=665 height=357}\n:::\n:::\n\n\nL'autocorrélation(ACF) et l'autocorrélation partielle(PACF) décroissent de manière exponentielle, ce qui indique que la série est stationnaire. \n\nPour plus de certitude, nous allons effectuer un test de Dickey-Fuller augmenté (ADF) pour tester la stationnaire dans la série :\n\n$$ \nH_0=\\rho = 1, \\alpha=0\n$$ \n\nDans le cas d'une série AR(1)($X_t = \\alpha + \\rho X_{t-1} + \\xi_t$) avec intercept, la série est non stationnaire si $\\rho = 1$ et stationnaire si $\\rho < 1.  Dans le cas contraire, il faudrait considérer la série de différences pour la rendre stationnaire.\n\n::: {#44a12e4a .cell execution_count=5}\n``` {.python .cell-code}\nfrom statsmodels.tsa.stattools import adfuller\nadf_result = adfuller(ts_data['Return'].dropna(), regression='c')\nprint(f\"ADF Statistic: {round(adf_result[0],2)} and p-value: {adf_result[1]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nADF Statistic: -41.06 and p-value: 0.0\n```\n:::\n:::\n\n\nLa p-value du test de dickey fuller est environ égale à 0, ce qui signifie que nous rejetons l'hypothèse nulle selon laquelle la série n'est pas stationnaire. Ainsi la série des log-rendements est stationnaire. Nous pouvons donc utiliser les rendements logarithmiques pour calculer la VaR à horizon 1 jour.\n\n# Modélisation de la VaR\n\nPour modéliser la VaR, nous considérons un échantillon d'apprentissage avec 75% des données et 25% pour l'échantillon de test.\n\n::: {#99749c70 .cell execution_count=6}\n``` {.python .cell-code}\ntrain_size = int(len(ts_data)*0.75)\ntest_size = len(ts_data)-train_size\n\ntrain_close = ts_data.iloc[0:train_size,:].dropna()\ntest_close = ts_data.iloc[train_size:len(ts_data),:]\nprint(\"Taille de l'ensemble d'apprentissage :\", len(train_close))\nprint(\"Taille de l'ensemble de test :\", len(test_close))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTaille de l'ensemble d'apprentissage : 6513\nTaille de l'ensemble de test : 2172\n```\n:::\n:::\n\n\n## VaR analytique\n\nPour rappel, la VaR analytique ou gaussienne est basée sur la distribution gaussienne des rendements. Nous allons utiliser la distribution normale pour calculer la VaR à horizon 1 jour. La VaR à horizon 1 jour est définie comme suit :\n\n$$\nVaR = -\\mu_{PnL} + \\Phi^{-1}(\\alpha) \\times \\sigma_{PnL}\n$$\noù $\\Phi^{-1}(\\alpha)$ est le quantile de la distribution normale du PnL (Profit and Loss) à $\\alpha$.\n\n::: {#641c08be .cell execution_count=7}\n``` {.python .cell-code}\nfrom scipy import stats\ndef gaussian_var(PnL, seuil):\n    mean_PnL = np.mean(PnL)\n    sd_PnL = np.std(PnL)\n    VaR = - mean_PnL + sd_PnL * stats.norm.ppf(seuil)\n    return VaR\n\nseuil = 0.99\nprices= train_close[\"Close\"].iloc[-1]*(1+train_close[\"Return\"])\ntrain_close[\"PnL\"] = prices - train_close[\"Close\"].iloc[-1]\n\n\nVaR_gaussienne = gaussian_var(train_close[\"PnL\"], seuil)\n\nprint(f\"La VaR à horizon 1 jour est de {round(VaR_gaussienne, 4)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa VaR à horizon 1 jour est de 159.2839\n```\n:::\n:::\n\n\nLa VaR à horizon 1 jour est de 159€, ce qui signifie que la perte maximale du portefeuille est de 159€ en un jour. \n\nSur 10 jours, la VaR est de $VaR_{1j} \\times \\sqrt{10}=$ 0.504€.\n\n::: {#0b6a6c4e .cell execution_count=8}\n``` {.python .cell-code}\n# Plot histogram of returns\nplt.hist(train_close[\"PnL\"], bins=50, density=True, alpha=0.7,color=\"grey\")\n\n# Plot VaR line\nplt.axvline(x=-VaR_gaussienne, color=\"orange\", linestyle=\"--\", linewidth=1)\nplt.axvline(x=0, color=\"grey\",  linewidth=1)\n\n# Add text for Loss and Gain\nplt.text(-100, plt.ylim()[1] * 0.9, 'Pertes', horizontalalignment='right', color='red')\nplt.text(100, plt.ylim()[1] * 0.9, 'Gains', horizontalalignment='left', color='green')\n\n\n# Add labels and title\nplt.xlabel(\"Returns\")\nplt.ylabel(\"Frequency\")\nplt.title(f\"Gaussian VaR at {seuil * 100}%, Var: {VaR_gaussienne:.4f}\")\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-9-output-1.png){width=606 height=449}\n:::\n:::\n\n\n### Backtesting\n\nPour backtester la VaR, nous allons comparer dans l'échantillon test les rendements logarithmiques du portefeuille avec la VaR à horizon 1 jour. Si le rendement est inférieur à la VaR, alors la VaR est violée et celà correspond à une exception.\n\n::: {#0835869e .cell execution_count=9}\n``` {.python .cell-code}\nprices= test_close[\"Close\"].iloc[-1]*(1+test_close[\"Return\"])\ntest_close[\"PnL\"] = prices - test_close[\"Close\"].iloc[-1] \n\nplt.plot(ts_data.index[0:train_size], train_close['PnL'], label=\"historical train returns\", color = 'gray')\nplt.plot(ts_data.index[train_size:], test_close['PnL'], label=\"historical test returns\", color = 'blue')\nplt.plot(ts_data.index[train_size:], [-VaR_gaussienne for i in range(test_size)], label=\"gaussian VaR\", color = 'red')\nlist_exceptions_gaus = [i for i in range(len(test_close['PnL'])) if test_close['PnL'][i]<-VaR_gaussienne]\nplt.scatter(test_close.index[list_exceptions_gaus], test_close['PnL'][list_exceptions_gaus], color='red', label='Exceptions')\nplt.title('CAC40')\nplt.ylabel('Values')\nplt.plot()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-10-output-1.png){width=627 height=431}\n:::\n:::\n\n\nNous pouvons compter le nombre d'exceptions pour la VaR à horizon 1 jour qui est égale à 77 et en déduisons que le taux d'exception est 3.58%.\n\n::: {#a436728f .cell execution_count=10}\n``` {.python .cell-code}\nround((len(list_exceptions_gaus)/test_size)*100,2) \n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3.5\n```\n:::\n:::\n\n\nPour savoir si ce taux d'exception est significativement inférieur à 1%, nous pouvons effectuer un test binomial. La p-value est d'environ 0.0344, ce qui signifie que le taux d'exception est significativement inférieur à 1% au risque de 5% de se tromper. Il est possible d'utiliser la fonction `stats.binomtest` pour effectuer ce test.\n\n::: {#9ba6b1e1 .cell execution_count=11}\n``` {.python .cell-code}\nnum_simulations = 1000\ntboot = np.zeros(num_simulations)\n\nfor i in range(num_simulations):\n  sample = np.random.choice(test_close[\"PnL\"], test_size, replace=True)\n  p0=1-seuil\n  n=len(sample)\n  variance=p0*(1-p0)/n\n  list_exceptions=[i for i in range(n) if sample[i]<-VaR_gaussienne]\n\n  p=(len(list_exceptions)/n)\n  tboot[i]=(p-p0)/np.sqrt(variance)\n\nt = np.mean(tboot)\n\nlower_bound = np.percentile(tboot,100*(1-seuil)/2)\nupper_bound = np.percentile(tboot,100*(1-(1-seuil)/2))\nIC = (lower_bound, upper_bound)\nprint(t)\npvaleur=1-stats.norm.cdf(t)\nprint(pvaleur)\nprint(IC)\n\nstats.binomtest(len(list_exceptions_gaus), test_size, p = 0.01).pvalue\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n11.685292419612775\n0.0\n(7.391455314698038, 16.882278025124318)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n5.489501863236273e-20\n```\n:::\n:::\n\n\n## VaR historique\n\nLa VaR historique est basée sur les rendements historiques. Elle est définie comme l'opposé du quantile de niveau $1-\\alpha$ des rendements logarithmiques historiques. En implémentant celà, nous obtenons que la VaR historique à horizon 1 jour est d'environ 0.0396 (0.1252 pour un horizon de 10 jours)\n\n::: {#bf07298d .cell execution_count=12}\n``` {.python .cell-code}\ndef historical_var(PnL, seuil):\n    return -np.percentile(PnL, (1 - seuil) * 100)\n\nprices= train_close[\"Close\"].iloc[-1]*(1+train_close[\"Return\"])\nPnL = prices - train_close[\"Close\"].iloc[-1]\n\nVaR_historique = historical_var(PnL,seuil)\nround(VaR_historique,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n194.5946\n```\n:::\n:::\n\n\n::: {#104fb1b1 .cell execution_count=13}\n``` {.python .cell-code}\n# Plot histogram of returns\nplt.hist(train_close[\"Return\"], bins=50, density=True, alpha=0.7,color=\"grey\")\n\n# Plot VaR line\nplt.axvline(x=-VaR_historique, color=\"orange\", linestyle=\"--\", linewidth=1)\nplt.axvline(x=0, color=\"grey\",  linewidth=1)\n# Add text for Loss and Gain\nplt.text(- 0.01, plt.ylim()[1] * 0.9, 'Pertes', horizontalalignment='right', color='red')\nplt.text(0.01, plt.ylim()[1] * 0.9, 'Gains', horizontalalignment='left', color='green')\n\n\n# Add labels and title\nplt.xlabel(\"Returns\")\nplt.ylabel(\"Frequency\")\nplt.title(f\"Historical VaR at {seuil * 100}% Var: {VaR_historique:.4f}\")\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-14-output-1.png){width=598 height=449}\n:::\n:::\n\n\n### Backtesting\n\nEn ce qui concerne le backtesting, nous pouvons voir que la VaR historique est violée 14 fois dans l'échantillon test. Le taux d'exception est de 0.64%.\n\n::: {#5029d454 .cell execution_count=14}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.plot(ts_data.index[0:train_size], train_close['PnL'], label=\"historical train log returns\", color = 'gray')\nplt.plot(ts_data.index[train_size:], test_close['Return'], label=\"historical test log returns\", color = 'blue')\nplt.plot(ts_data.index[train_size:], [-VaR_historique for i in range(test_size)], label=\"historical VaR\", color = 'red')\nlist_exceptions_hist = [i for i in range(len(test_close['Return'])) if test_close['Return'][i]<-VaR_historique]\nplt.scatter(test_close.index[list_exceptions_hist], test_close['Return'][list_exceptions_hist], color='red', label='Exceptions')\nplt.title('CAC40')\nplt.ylabel('Values')\nplt.plot()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-15-output-1.png){width=619 height=431}\n:::\n:::\n\n\nNous pouvons compter le nombre d'exceptions pour la VaR à horizon 1 jour qui est égale à 14 et en déduisons que le taux d'exception est 0.65%. Ce taux d'exception est statistiquement supérieur à 1% (car la pvaleur est d'environ 0.95). Ainsi, la VaR historique est performante pour la période considérée.\n\n::: {#a0d45025 .cell execution_count=15}\n``` {.python .cell-code}\nround((len(list_exceptions_hist)/test_size)*100,2) \np0=1-seuil\nvariance=p0*(1-p0)/test_size\np=(len(list_exceptions_hist)/test_size)\n\nt=(p-p0)/np.sqrt(variance)\npvaleur=1-stats.norm.cdf(t)\npvaleur\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.9999985930112507\n```\n:::\n:::\n\n\n## VaR Monte Carlo\nLa VaR Monte Carlo est basée sur la simulation de trajectoires de rendements. Nous allons simuler 1000 trajectoires de rendements logarithmiques et calculer la VaR à horizon 1 jour en supposant que le prix de la clôture suit une distribution normale.\n\n::: {#70026c1b .cell execution_count=16}\n``` {.python .cell-code}\ndef monte_carlo_var(Close,Return,seuil, num_simulations):\n  mean = np.mean(Return)\n  std = np.std(Return)\n  # Generate random scenarios of future returns\n  simulated_returns = np.random.normal(mean, std, size=num_simulations)\n  simulated_prices = Close.iloc[-1] * (1+simulated_returns)\n  simulated_pnl = simulated_prices - Close.iloc[-1]\n\n  # Calculate portfolio values for each scenario\n    \n  return historical_var(simulated_pnl,seuil)\n\ndef bootstrap_var(PnL, seuil, num_simulations, alpha_IC, B):\n    VaRs_boot = np.zeros(num_simulations)\n\n    for i in range(num_simulations):\n        sample = np.random.choice(PnL, B, replace=True)\n        VaRs_boot[i] = historical_var(sample, seuil)\n\n    VaR = np.mean(VaRs_boot)\n\n    lower_bound = np.percentile(VaRs_boot, 100 * (1-alpha_IC) / 2)\n    upper_bound = np.percentile(VaRs_boot, 100 * (1 - (1-alpha_IC) / 2))\n    IC = (lower_bound, upper_bound)\n\n    return VaR, IC\n\nVaR_boostrap, IC = bootstrap_var(train_close[\"Return\"], seuil, 5000, 0.95, train_size)\nVaR_boostrap\nVaR_monte_carlo = monte_carlo_var(train_close[\"Close\"],train_close[\"Return\"], seuil, 100)\nVaR_monte_carlo\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n161.63893367324007\n```\n:::\n:::\n\n\n::: {#b28b5623 .cell execution_count=17}\n``` {.python .cell-code}\nplt.plot(ts_data.index[0:train_size], train_close['Return'], label=\"historical train log returns\", color = 'gray')\nplt.plot(ts_data.index[train_size:], test_close['Return'], label=\"historical test log returns\", color = 'blue')\nplt.plot(ts_data.index[train_size:], [-VaR_boostrap for i in range(test_size)], label=\"Non parametric Bootstrap VaR\", color = 'red')\nlist_exceptions_np_boot = [i for i in range(len(test_close['Return'])) if test_close['Return'][i]<-VaR_boostrap]\nplt.scatter(test_close.index[list_exceptions_np_boot], test_close['Return'][list_exceptions_np_boot], color='red', label='Exceptions')\nplt.title('CAC40')\nplt.ylabel('Values')\nplt.plot()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](VaR_eg_files/figure-html/cell-18-output-1.png){width=623 height=431}\n:::\n:::\n\n\n",
    "supporting": [
      "VaR_eg_files"
    ],
    "filters": [],
    "includes": {}
  }
}